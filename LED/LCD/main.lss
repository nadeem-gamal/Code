
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000089a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  0000089a  0000090e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000017e  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000800  00000000  00000000  00000ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000218  00000000  00000000  000012c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000b25  00000000  00000000  000014de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000150  00000000  00000000  00002004  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001c9  00000000  00000000  00002154  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002c1  00000000  00000000  0000231d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  000025de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 88 03 	call	0x710	; 0x710 <main>
  7a:	0c 94 4b 04 	jmp	0x896	; 0x896 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <pinChange>:

char firstAddressForLCD[4] = {0, 64, 20, 84};

void pinChange(int a, int b)
{
	if(b == 0)
  82:	67 2b       	or	r22, r23
  84:	09 f0       	breq	.+2      	; 0x88 <pinChange+0x6>
  86:	9f c0       	rjmp	.+318    	; 0x1c6 <pinChange+0x144>
	{
		if(a == eS_PORTA0)
  88:	00 97       	sbiw	r24, 0x00	; 0
  8a:	11 f4       	brne	.+4      	; 0x90 <pinChange+0xe>
		  PORTA &= ~(1<<PA0);
  8c:	d8 98       	cbi	0x1b, 0	; 27
  8e:	08 95       	ret
		else if(a == eS_PORTA1)
  90:	81 30       	cpi	r24, 0x01	; 1
  92:	91 05       	cpc	r25, r1
  94:	11 f4       	brne	.+4      	; 0x9a <pinChange+0x18>
		  PORTA &= ~(1<<PA1); 
  96:	d9 98       	cbi	0x1b, 1	; 27
  98:	08 95       	ret
		else if(a == eS_PORTA2)
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	91 05       	cpc	r25, r1
  9e:	11 f4       	brne	.+4      	; 0xa4 <pinChange+0x22>
		  PORTA &= ~(1<<PA2);
  a0:	da 98       	cbi	0x1b, 2	; 27
  a2:	08 95       	ret
		else if(a == eS_PORTA3)
  a4:	83 30       	cpi	r24, 0x03	; 3
  a6:	91 05       	cpc	r25, r1
  a8:	11 f4       	brne	.+4      	; 0xae <pinChange+0x2c>
		  PORTA &= ~(1<<PA3); 
  aa:	db 98       	cbi	0x1b, 3	; 27
  ac:	08 95       	ret
		else if(a == eS_PORTA4)
  ae:	84 30       	cpi	r24, 0x04	; 4
  b0:	91 05       	cpc	r25, r1
  b2:	11 f4       	brne	.+4      	; 0xb8 <pinChange+0x36>
		  PORTA &= ~(1<<PA4); 
  b4:	dc 98       	cbi	0x1b, 4	; 27
  b6:	08 95       	ret
		else if(a == eS_PORTA5)
  b8:	85 30       	cpi	r24, 0x05	; 5
  ba:	91 05       	cpc	r25, r1
  bc:	11 f4       	brne	.+4      	; 0xc2 <pinChange+0x40>
		  PORTA &= ~(1<<PA5); 
  be:	dd 98       	cbi	0x1b, 5	; 27
  c0:	08 95       	ret
		else if(a == eS_PORTA6)
  c2:	86 30       	cpi	r24, 0x06	; 6
  c4:	91 05       	cpc	r25, r1
  c6:	11 f4       	brne	.+4      	; 0xcc <pinChange+0x4a>
		  PORTA &= ~(1<<PA6);  
  c8:	de 98       	cbi	0x1b, 6	; 27
  ca:	08 95       	ret
		else if(a == eS_PORTA7)
  cc:	87 30       	cpi	r24, 0x07	; 7
  ce:	91 05       	cpc	r25, r1
  d0:	11 f4       	brne	.+4      	; 0xd6 <pinChange+0x54>
		  PORTA &= ~(1<<PA7);
  d2:	df 98       	cbi	0x1b, 7	; 27
  d4:	08 95       	ret
		else if(a == eS_PORTB0)
  d6:	8a 30       	cpi	r24, 0x0A	; 10
  d8:	91 05       	cpc	r25, r1
  da:	11 f4       	brne	.+4      	; 0xe0 <pinChange+0x5e>
		  PORTB &= ~(1<<PB0);  
  dc:	c0 98       	cbi	0x18, 0	; 24
  de:	08 95       	ret
		else if(a == eS_PORTB1)
  e0:	8b 30       	cpi	r24, 0x0B	; 11
  e2:	91 05       	cpc	r25, r1
  e4:	11 f4       	brne	.+4      	; 0xea <pinChange+0x68>
		  PORTB &= ~(1<<PB1);
  e6:	c1 98       	cbi	0x18, 1	; 24
  e8:	08 95       	ret
		else if(a == eS_PORTB2)
  ea:	8c 30       	cpi	r24, 0x0C	; 12
  ec:	91 05       	cpc	r25, r1
  ee:	11 f4       	brne	.+4      	; 0xf4 <pinChange+0x72>
		  PORTB &= ~(1<<PB2);  
  f0:	c2 98       	cbi	0x18, 2	; 24
  f2:	08 95       	ret
		else if(a == eS_PORTB3)
  f4:	8d 30       	cpi	r24, 0x0D	; 13
  f6:	91 05       	cpc	r25, r1
  f8:	11 f4       	brne	.+4      	; 0xfe <pinChange+0x7c>
		  PORTB &= ~(1<<PB3);  
  fa:	c3 98       	cbi	0x18, 3	; 24
  fc:	08 95       	ret
		else if(a == eS_PORTB4)
  fe:	8e 30       	cpi	r24, 0x0E	; 14
 100:	91 05       	cpc	r25, r1
 102:	11 f4       	brne	.+4      	; 0x108 <pinChange+0x86>
		  PORTB &= ~(1<<PB4);  
 104:	c4 98       	cbi	0x18, 4	; 24
 106:	08 95       	ret
		else if(a == eS_PORTB5)
 108:	8f 30       	cpi	r24, 0x0F	; 15
 10a:	91 05       	cpc	r25, r1
 10c:	11 f4       	brne	.+4      	; 0x112 <pinChange+0x90>
		  PORTB &= ~(1<<PB5);  
 10e:	c5 98       	cbi	0x18, 5	; 24
 110:	08 95       	ret
		else if(a == eS_PORTB6)
 112:	80 31       	cpi	r24, 0x10	; 16
 114:	91 05       	cpc	r25, r1
 116:	11 f4       	brne	.+4      	; 0x11c <pinChange+0x9a>
		  PORTB &= ~(1<<PB6);  
 118:	c6 98       	cbi	0x18, 6	; 24
 11a:	08 95       	ret
		else if(a == eS_PORTB7)
 11c:	81 31       	cpi	r24, 0x11	; 17
 11e:	91 05       	cpc	r25, r1
 120:	11 f4       	brne	.+4      	; 0x126 <pinChange+0xa4>
		  PORTB &= ~(1<<PB7);
 122:	c7 98       	cbi	0x18, 7	; 24
 124:	08 95       	ret
		else if(a == eS_PORTC0)
 126:	84 31       	cpi	r24, 0x14	; 20
 128:	91 05       	cpc	r25, r1
 12a:	11 f4       	brne	.+4      	; 0x130 <pinChange+0xae>
		  PORTC &= ~(1<<PC0);   
 12c:	a8 98       	cbi	0x15, 0	; 21
 12e:	08 95       	ret
		else if(a == eS_PORTC1)
 130:	85 31       	cpi	r24, 0x15	; 21
 132:	91 05       	cpc	r25, r1
 134:	11 f4       	brne	.+4      	; 0x13a <pinChange+0xb8>
		  PORTC &= ~(1<<PC1); 
 136:	a9 98       	cbi	0x15, 1	; 21
 138:	08 95       	ret
		else if(a == eS_PORTC2)
 13a:	86 31       	cpi	r24, 0x16	; 22
 13c:	91 05       	cpc	r25, r1
 13e:	11 f4       	brne	.+4      	; 0x144 <pinChange+0xc2>
		  PORTC &= ~(1<<PC2);
 140:	aa 98       	cbi	0x15, 2	; 21
 142:	08 95       	ret
		else if(a == eS_PORTC3)
 144:	87 31       	cpi	r24, 0x17	; 23
 146:	91 05       	cpc	r25, r1
 148:	11 f4       	brne	.+4      	; 0x14e <pinChange+0xcc>
		  PORTC &= ~(1<<PC3);   
 14a:	ab 98       	cbi	0x15, 3	; 21
 14c:	08 95       	ret
		else if(a == eS_PORTC4)
 14e:	88 31       	cpi	r24, 0x18	; 24
 150:	91 05       	cpc	r25, r1
 152:	11 f4       	brne	.+4      	; 0x158 <pinChange+0xd6>
		  PORTC &= ~(1<<PC4);  
 154:	ac 98       	cbi	0x15, 4	; 21
 156:	08 95       	ret
		else if(a == eS_PORTC5)
 158:	89 31       	cpi	r24, 0x19	; 25
 15a:	91 05       	cpc	r25, r1
 15c:	11 f4       	brne	.+4      	; 0x162 <pinChange+0xe0>
		  PORTC &= ~(1<<PC5);  
 15e:	ad 98       	cbi	0x15, 5	; 21
 160:	08 95       	ret
        else if(a == eS_PORTC6)
 162:	8a 31       	cpi	r24, 0x1A	; 26
 164:	91 05       	cpc	r25, r1
 166:	11 f4       	brne	.+4      	; 0x16c <pinChange+0xea>
          PORTC &= ~(1<<PC6);		
 168:	ae 98       	cbi	0x15, 6	; 21
 16a:	08 95       	ret
		else if(a == eS_PORTC7)
 16c:	8b 31       	cpi	r24, 0x1B	; 27
 16e:	91 05       	cpc	r25, r1
 170:	11 f4       	brne	.+4      	; 0x176 <pinChange+0xf4>
		  PORTC &= ~(1<<PC7);
 172:	af 98       	cbi	0x15, 7	; 21
 174:	08 95       	ret
		else if(a == eS_PORTD0)
 176:	8e 31       	cpi	r24, 0x1E	; 30
 178:	91 05       	cpc	r25, r1
 17a:	11 f4       	brne	.+4      	; 0x180 <pinChange+0xfe>
		  PORTD &= ~(1<<PD0);
 17c:	90 98       	cbi	0x12, 0	; 18
 17e:	08 95       	ret
		else if(a == eS_PORTD1)
 180:	8f 31       	cpi	r24, 0x1F	; 31
 182:	91 05       	cpc	r25, r1
 184:	11 f4       	brne	.+4      	; 0x18a <pinChange+0x108>
		  PORTD &= ~(1<<PD1);  
 186:	91 98       	cbi	0x12, 1	; 18
 188:	08 95       	ret
		else if(a == eS_PORTD2)
 18a:	80 32       	cpi	r24, 0x20	; 32
 18c:	91 05       	cpc	r25, r1
 18e:	11 f4       	brne	.+4      	; 0x194 <pinChange+0x112>
		  PORTD &= ~(1<<PD2);
 190:	92 98       	cbi	0x12, 2	; 18
 192:	08 95       	ret
		else if(a == eS_PORTD3)
 194:	81 32       	cpi	r24, 0x21	; 33
 196:	91 05       	cpc	r25, r1
 198:	11 f4       	brne	.+4      	; 0x19e <pinChange+0x11c>
		  PORTD &= ~(1<<PD3);
 19a:	93 98       	cbi	0x12, 3	; 18
 19c:	08 95       	ret
		else if(a == eS_PORTD4)
 19e:	82 32       	cpi	r24, 0x22	; 34
 1a0:	91 05       	cpc	r25, r1
 1a2:	11 f4       	brne	.+4      	; 0x1a8 <pinChange+0x126>
		  PORTD &= ~(1<<PD4);
 1a4:	94 98       	cbi	0x12, 4	; 18
 1a6:	08 95       	ret
		else if(a == eS_PORTD5)
 1a8:	83 32       	cpi	r24, 0x23	; 35
 1aa:	91 05       	cpc	r25, r1
 1ac:	11 f4       	brne	.+4      	; 0x1b2 <pinChange+0x130>
		  PORTD &= ~(1<<PD5);
 1ae:	95 98       	cbi	0x12, 5	; 18
 1b0:	08 95       	ret
		else if(a == eS_PORTD6)
 1b2:	84 32       	cpi	r24, 0x24	; 36
 1b4:	91 05       	cpc	r25, r1
 1b6:	11 f4       	brne	.+4      	; 0x1bc <pinChange+0x13a>
		  PORTD &= ~(1<<PD6);   
 1b8:	96 98       	cbi	0x12, 6	; 18
 1ba:	08 95       	ret
		else if(a == eS_PORTD7)
 1bc:	85 97       	sbiw	r24, 0x25	; 37
 1be:	09 f0       	breq	.+2      	; 0x1c2 <pinChange+0x140>
 1c0:	9f c0       	rjmp	.+318    	; 0x300 <pinChange+0x27e>
		  PORTD &= ~(1<<PD7);           
 1c2:	97 98       	cbi	0x12, 7	; 18
 1c4:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
 1c6:	00 97       	sbiw	r24, 0x00	; 0
 1c8:	11 f4       	brne	.+4      	; 0x1ce <pinChange+0x14c>
		  PORTA |= (1<<PA0);
 1ca:	d8 9a       	sbi	0x1b, 0	; 27
 1cc:	08 95       	ret
		else if(a == eS_PORTA1)
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	91 05       	cpc	r25, r1
 1d2:	11 f4       	brne	.+4      	; 0x1d8 <pinChange+0x156>
		  PORTA |= (1<<PA1);
 1d4:	d9 9a       	sbi	0x1b, 1	; 27
 1d6:	08 95       	ret
		else if(a == eS_PORTA2)
 1d8:	82 30       	cpi	r24, 0x02	; 2
 1da:	91 05       	cpc	r25, r1
 1dc:	11 f4       	brne	.+4      	; 0x1e2 <pinChange+0x160>
		  PORTA |= (1<<PA2);
 1de:	da 9a       	sbi	0x1b, 2	; 27
 1e0:	08 95       	ret
		else if(a == eS_PORTA3)
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	91 05       	cpc	r25, r1
 1e6:	11 f4       	brne	.+4      	; 0x1ec <pinChange+0x16a>
		  PORTA |= (1<<PA3);
 1e8:	db 9a       	sbi	0x1b, 3	; 27
 1ea:	08 95       	ret
		else if(a == eS_PORTA4)
 1ec:	84 30       	cpi	r24, 0x04	; 4
 1ee:	91 05       	cpc	r25, r1
 1f0:	11 f4       	brne	.+4      	; 0x1f6 <pinChange+0x174>
		  PORTA |= (1<<PA4);
 1f2:	dc 9a       	sbi	0x1b, 4	; 27
 1f4:	08 95       	ret
		else if(a == eS_PORTA5)
 1f6:	85 30       	cpi	r24, 0x05	; 5
 1f8:	91 05       	cpc	r25, r1
 1fa:	11 f4       	brne	.+4      	; 0x200 <pinChange+0x17e>
		  PORTA |= (1<<PA5);
 1fc:	dd 9a       	sbi	0x1b, 5	; 27
 1fe:	08 95       	ret
		else if(a == eS_PORTA6)
 200:	86 30       	cpi	r24, 0x06	; 6
 202:	91 05       	cpc	r25, r1
 204:	11 f4       	brne	.+4      	; 0x20a <pinChange+0x188>
		  PORTA |= (1<<PA6);
 206:	de 9a       	sbi	0x1b, 6	; 27
 208:	08 95       	ret
		else if(a == eS_PORTA7)
 20a:	87 30       	cpi	r24, 0x07	; 7
 20c:	91 05       	cpc	r25, r1
 20e:	11 f4       	brne	.+4      	; 0x214 <pinChange+0x192>
		  PORTA |= (1<<PA7);
 210:	df 9a       	sbi	0x1b, 7	; 27
 212:	08 95       	ret
		else if(a == eS_PORTB0)
 214:	8a 30       	cpi	r24, 0x0A	; 10
 216:	91 05       	cpc	r25, r1
 218:	11 f4       	brne	.+4      	; 0x21e <pinChange+0x19c>
	  	  PORTB |= (1<<PB0);
 21a:	c0 9a       	sbi	0x18, 0	; 24
 21c:	08 95       	ret
		else if(a == eS_PORTB1)
 21e:	8b 30       	cpi	r24, 0x0B	; 11
 220:	91 05       	cpc	r25, r1
 222:	11 f4       	brne	.+4      	; 0x228 <pinChange+0x1a6>
		  PORTB |= (1<<PB1);
 224:	c1 9a       	sbi	0x18, 1	; 24
 226:	08 95       	ret
		else if(a == eS_PORTB2)
 228:	8c 30       	cpi	r24, 0x0C	; 12
 22a:	91 05       	cpc	r25, r1
 22c:	11 f4       	brne	.+4      	; 0x232 <pinChange+0x1b0>
		  PORTB |= (1<<PB2);
 22e:	c2 9a       	sbi	0x18, 2	; 24
 230:	08 95       	ret
		else if(a == eS_PORTB3)
 232:	8d 30       	cpi	r24, 0x0D	; 13
 234:	91 05       	cpc	r25, r1
 236:	11 f4       	brne	.+4      	; 0x23c <pinChange+0x1ba>
		  PORTB |= (1<<PB3);
 238:	c3 9a       	sbi	0x18, 3	; 24
 23a:	08 95       	ret
		else if(a == eS_PORTB4)
 23c:	8e 30       	cpi	r24, 0x0E	; 14
 23e:	91 05       	cpc	r25, r1
 240:	11 f4       	brne	.+4      	; 0x246 <pinChange+0x1c4>
		  PORTB |= (1<<PB4);
 242:	c4 9a       	sbi	0x18, 4	; 24
 244:	08 95       	ret
		else if(a == eS_PORTB5)
 246:	8f 30       	cpi	r24, 0x0F	; 15
 248:	91 05       	cpc	r25, r1
 24a:	11 f4       	brne	.+4      	; 0x250 <pinChange+0x1ce>
		  PORTB |= (1<<PB5);
 24c:	c5 9a       	sbi	0x18, 5	; 24
 24e:	08 95       	ret
		else if(a == eS_PORTB6)
 250:	80 31       	cpi	r24, 0x10	; 16
 252:	91 05       	cpc	r25, r1
 254:	11 f4       	brne	.+4      	; 0x25a <pinChange+0x1d8>
		  PORTB |= (1<<PB6);
 256:	c6 9a       	sbi	0x18, 6	; 24
 258:	08 95       	ret
		else if(a == eS_PORTB7)
 25a:	81 31       	cpi	r24, 0x11	; 17
 25c:	91 05       	cpc	r25, r1
 25e:	11 f4       	brne	.+4      	; 0x264 <pinChange+0x1e2>
		  PORTB |= (1<<PB7);
 260:	c7 9a       	sbi	0x18, 7	; 24
 262:	08 95       	ret
		else if(a == eS_PORTC0)
 264:	84 31       	cpi	r24, 0x14	; 20
 266:	91 05       	cpc	r25, r1
 268:	11 f4       	brne	.+4      	; 0x26e <pinChange+0x1ec>
		  PORTC |= (1<<PC0);
 26a:	a8 9a       	sbi	0x15, 0	; 21
 26c:	08 95       	ret
		else if(a == eS_PORTC1)
 26e:	85 31       	cpi	r24, 0x15	; 21
 270:	91 05       	cpc	r25, r1
 272:	11 f4       	brne	.+4      	; 0x278 <pinChange+0x1f6>
		  PORTC |= (1<<PC1);
 274:	a9 9a       	sbi	0x15, 1	; 21
 276:	08 95       	ret
		else if(a == eS_PORTC2)
 278:	86 31       	cpi	r24, 0x16	; 22
 27a:	91 05       	cpc	r25, r1
 27c:	11 f4       	brne	.+4      	; 0x282 <pinChange+0x200>
	  	  PORTC |= (1<<PC2);
 27e:	aa 9a       	sbi	0x15, 2	; 21
 280:	08 95       	ret
		else if(a == eS_PORTC3)
 282:	87 31       	cpi	r24, 0x17	; 23
 284:	91 05       	cpc	r25, r1
 286:	11 f4       	brne	.+4      	; 0x28c <pinChange+0x20a>
		  PORTC |= (1<<PC3);
 288:	ab 9a       	sbi	0x15, 3	; 21
 28a:	08 95       	ret
		else if(a == eS_PORTC4)
 28c:	88 31       	cpi	r24, 0x18	; 24
 28e:	91 05       	cpc	r25, r1
 290:	11 f4       	brne	.+4      	; 0x296 <pinChange+0x214>
		  PORTC |= (1<<PC4);
 292:	ac 9a       	sbi	0x15, 4	; 21
 294:	08 95       	ret
		else if(a == eS_PORTC5)
 296:	89 31       	cpi	r24, 0x19	; 25
 298:	91 05       	cpc	r25, r1
 29a:	11 f4       	brne	.+4      	; 0x2a0 <pinChange+0x21e>
		  PORTC |= (1<<PC5);
 29c:	ad 9a       	sbi	0x15, 5	; 21
 29e:	08 95       	ret
		else if(a == eS_PORTC6)
 2a0:	8a 31       	cpi	r24, 0x1A	; 26
 2a2:	91 05       	cpc	r25, r1
 2a4:	11 f4       	brne	.+4      	; 0x2aa <pinChange+0x228>
		  PORTC |= (1<<PC6);  
 2a6:	ae 9a       	sbi	0x15, 6	; 21
 2a8:	08 95       	ret
		else if(a == eS_PORTC7)
 2aa:	8b 31       	cpi	r24, 0x1B	; 27
 2ac:	91 05       	cpc	r25, r1
 2ae:	11 f4       	brne	.+4      	; 0x2b4 <pinChange+0x232>
		  PORTC |= (1<<PC7);
 2b0:	af 9a       	sbi	0x15, 7	; 21
 2b2:	08 95       	ret
		else if(a == eS_PORTD0)
 2b4:	8e 31       	cpi	r24, 0x1E	; 30
 2b6:	91 05       	cpc	r25, r1
 2b8:	11 f4       	brne	.+4      	; 0x2be <pinChange+0x23c>
		  PORTD |= (1<<PD0);
 2ba:	90 9a       	sbi	0x12, 0	; 18
 2bc:	08 95       	ret
		else if(a == eS_PORTD1)
 2be:	8f 31       	cpi	r24, 0x1F	; 31
 2c0:	91 05       	cpc	r25, r1
 2c2:	11 f4       	brne	.+4      	; 0x2c8 <pinChange+0x246>
		  PORTD |= (1<<PD1);
 2c4:	91 9a       	sbi	0x12, 1	; 18
 2c6:	08 95       	ret
		else if(a == eS_PORTD2)
 2c8:	80 32       	cpi	r24, 0x20	; 32
 2ca:	91 05       	cpc	r25, r1
 2cc:	11 f4       	brne	.+4      	; 0x2d2 <pinChange+0x250>
		  PORTD |= (1<<PD2);
 2ce:	92 9a       	sbi	0x12, 2	; 18
 2d0:	08 95       	ret
		else if(a == eS_PORTD3)
 2d2:	81 32       	cpi	r24, 0x21	; 33
 2d4:	91 05       	cpc	r25, r1
 2d6:	11 f4       	brne	.+4      	; 0x2dc <pinChange+0x25a>
		  PORTD |= (1<<PD3);
 2d8:	93 9a       	sbi	0x12, 3	; 18
 2da:	08 95       	ret
		else if(a == eS_PORTD4)
 2dc:	82 32       	cpi	r24, 0x22	; 34
 2de:	91 05       	cpc	r25, r1
 2e0:	11 f4       	brne	.+4      	; 0x2e6 <pinChange+0x264>
		  PORTD |= (1<<PD4);
 2e2:	94 9a       	sbi	0x12, 4	; 18
 2e4:	08 95       	ret
		else if(a == eS_PORTD5)
 2e6:	83 32       	cpi	r24, 0x23	; 35
 2e8:	91 05       	cpc	r25, r1
 2ea:	11 f4       	brne	.+4      	; 0x2f0 <pinChange+0x26e>
		  PORTD |= (1<<PD5);
 2ec:	95 9a       	sbi	0x12, 5	; 18
 2ee:	08 95       	ret
		else if(a == eS_PORTD6)
 2f0:	84 32       	cpi	r24, 0x24	; 36
 2f2:	91 05       	cpc	r25, r1
 2f4:	11 f4       	brne	.+4      	; 0x2fa <pinChange+0x278>
		  PORTD |= (1<<PD6);
 2f6:	96 9a       	sbi	0x12, 6	; 18
 2f8:	08 95       	ret
		else if(a == eS_PORTD7)
 2fa:	85 97       	sbiw	r24, 0x25	; 37
 2fc:	09 f4       	brne	.+2      	; 0x300 <pinChange+0x27e>
		  PORTD |= (1<<PD7);
 2fe:	97 9a       	sbi	0x12, 7	; 18
 300:	08 95       	ret

00000302 <Lcd8_Port>:



//LCD 8 Bit Interfacing Functions
void Lcd8_Port(char a)
{
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	08 2f       	mov	r16, r24
	if(a & 1)
 308:	18 2f       	mov	r17, r24
 30a:	80 ff       	sbrs	r24, 0
 30c:	05 c0       	rjmp	.+10     	; 0x318 <Lcd8_Port+0x16>
	pinChange(D0,1);
 30e:	8e e1       	ldi	r24, 0x1E	; 30
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	61 e0       	ldi	r22, 0x01	; 1
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	04 c0       	rjmp	.+8      	; 0x320 <Lcd8_Port+0x1e>
	else
	pinChange(D0,0);
 318:	8e e1       	ldi	r24, 0x1E	; 30
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 2)
 324:	11 ff       	sbrs	r17, 1
 326:	05 c0       	rjmp	.+10     	; 0x332 <Lcd8_Port+0x30>
	pinChange(D1,1);
 328:	8f e1       	ldi	r24, 0x1F	; 31
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	04 c0       	rjmp	.+8      	; 0x33a <Lcd8_Port+0x38>
	else
	pinChange(D1,0);
 332:	8f e1       	ldi	r24, 0x1F	; 31
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 4)
 33e:	12 ff       	sbrs	r17, 2
 340:	05 c0       	rjmp	.+10     	; 0x34c <Lcd8_Port+0x4a>
	pinChange(D2,1);
 342:	80 e2       	ldi	r24, 0x20	; 32
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	61 e0       	ldi	r22, 0x01	; 1
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	04 c0       	rjmp	.+8      	; 0x354 <Lcd8_Port+0x52>
	else
	pinChange(D2,0);
 34c:	80 e2       	ldi	r24, 0x20	; 32
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 8)
 358:	13 ff       	sbrs	r17, 3
 35a:	05 c0       	rjmp	.+10     	; 0x366 <Lcd8_Port+0x64>
	pinChange(D3,1);
 35c:	81 e2       	ldi	r24, 0x21	; 33
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	04 c0       	rjmp	.+8      	; 0x36e <Lcd8_Port+0x6c>
	else
	pinChange(D3,0);
 366:	81 e2       	ldi	r24, 0x21	; 33
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 16)
 372:	14 ff       	sbrs	r17, 4
 374:	05 c0       	rjmp	.+10     	; 0x380 <Lcd8_Port+0x7e>
	pinChange(D4,1);
 376:	82 e2       	ldi	r24, 0x22	; 34
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	61 e0       	ldi	r22, 0x01	; 1
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	04 c0       	rjmp	.+8      	; 0x388 <Lcd8_Port+0x86>
	else
	pinChange(D4,0);
 380:	82 e2       	ldi	r24, 0x22	; 34
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>

	if(a & 32)
 38c:	15 ff       	sbrs	r17, 5
 38e:	05 c0       	rjmp	.+10     	; 0x39a <Lcd8_Port+0x98>
	pinChange(D5,1);
 390:	83 e2       	ldi	r24, 0x23	; 35
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	61 e0       	ldi	r22, 0x01	; 1
 396:	70 e0       	ldi	r23, 0x00	; 0
 398:	04 c0       	rjmp	.+8      	; 0x3a2 <Lcd8_Port+0xa0>
	else
	pinChange(D5,0);
 39a:	83 e2       	ldi	r24, 0x23	; 35
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	70 e0       	ldi	r23, 0x00	; 0
 3a2:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 64)
 3a6:	16 ff       	sbrs	r17, 6
 3a8:	05 c0       	rjmp	.+10     	; 0x3b4 <Lcd8_Port+0xb2>
	pinChange(D6,1);
 3aa:	84 e2       	ldi	r24, 0x24	; 36
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	61 e0       	ldi	r22, 0x01	; 1
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	04 c0       	rjmp	.+8      	; 0x3bc <Lcd8_Port+0xba>
	else
	pinChange(D6,0);
 3b4:	84 e2       	ldi	r24, 0x24	; 36
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 128)
 3c0:	07 ff       	sbrs	r16, 7
 3c2:	05 c0       	rjmp	.+10     	; 0x3ce <Lcd8_Port+0xcc>
	pinChange(D7,1);
 3c4:	85 e2       	ldi	r24, 0x25	; 37
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	61 e0       	ldi	r22, 0x01	; 1
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	04 c0       	rjmp	.+8      	; 0x3d6 <Lcd8_Port+0xd4>
	else
	pinChange(D7,0);
 3ce:	85 e2       	ldi	r24, 0x25	; 37
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
}
 3da:	1f 91       	pop	r17
 3dc:	0f 91       	pop	r16
 3de:	08 95       	ret

000003e0 <Lcd8_Cmd>:
void Lcd8_Cmd(char a)
{
 3e0:	0f 93       	push	r16
 3e2:	1f 93       	push	r17
 3e4:	18 2f       	mov	r17, r24
	pinChange(RS,0);             // => RS = 0
 3e6:	8a e1       	ldi	r24, 0x1A	; 26
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	Lcd8_Port(a);             //Data transfer
 3f2:	81 2f       	mov	r24, r17
 3f4:	0e 94 81 01 	call	0x302	; 0x302 <Lcd8_Port>
	pinChange(EN,1);             // => E = 1
 3f8:	8b e1       	ldi	r24, 0x1B	; 27
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	61 e0       	ldi	r22, 0x01	; 1
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 404:	00 ed       	ldi	r16, 0xD0	; 208
 406:	17 e0       	ldi	r17, 0x07	; 7
 408:	c8 01       	movw	r24, r16
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <Lcd8_Cmd+0x2a>
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
 40e:	8b e1       	ldi	r24, 0x1B	; 27
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 41a:	c8 01       	movw	r24, r16
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <Lcd8_Cmd+0x3c>
	_delay_ms(1);
}
 420:	1f 91       	pop	r17
 422:	0f 91       	pop	r16
 424:	08 95       	ret

00000426 <Lcd8_Clear>:

void Lcd8_Clear()
{
	Lcd8_Cmd(1);
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Lcd8_Cmd>
}
 42c:	08 95       	ret

0000042e <Lcd8_Set_Cursor>:
//	if(a == 1)
//	Lcd8_Cmd(0x80 + b);
//	else if(a == 2)
//	Lcd8_Cmd(0xC0 + b);
	
	Lcd8_Cmd(0x80 + firstAddressForLCD[b-1] + (a-1));
 42e:	81 58       	subi	r24, 0x81	; 129
 430:	e4 e7       	ldi	r30, 0x74	; 116
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	e6 0f       	add	r30, r22
 436:	f1 1d       	adc	r31, r1
 438:	90 81       	ld	r25, Z
 43a:	89 0f       	add	r24, r25
 43c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Lcd8_Cmd>
}
 440:	08 95       	ret

00000442 <Lcd8_Init>:

void Lcd8_Init()
{
	pinChange(RS,0);
 442:	8a e1       	ldi	r24, 0x1A	; 26
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	60 e0       	ldi	r22, 0x00	; 0
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	pinChange(EN,0);
 44e:	8b e1       	ldi	r24, 0x1B	; 27
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	60 e0       	ldi	r22, 0x00	; 0
 454:	70 e0       	ldi	r23, 0x00	; 0
 456:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 45a:	80 e4       	ldi	r24, 0x40	; 64
 45c:	9c e9       	ldi	r25, 0x9C	; 156
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <Lcd8_Init+0x1c>
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd8_Cmd(0x30);
 462:	80 e3       	ldi	r24, 0x30	; 48
 464:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Lcd8_Cmd>
 468:	80 e1       	ldi	r24, 0x10	; 16
 46a:	97 e2       	ldi	r25, 0x27	; 39
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <Lcd8_Init+0x2a>
	_delay_ms(5);
	Lcd8_Cmd(0x30);
 470:	80 e3       	ldi	r24, 0x30	; 48
 472:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Lcd8_Cmd>
 476:	80 ed       	ldi	r24, 0xD0	; 208
 478:	97 e0       	ldi	r25, 0x07	; 7
 47a:	01 97       	sbiw	r24, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <Lcd8_Init+0x38>
	_delay_ms(1);
	Lcd8_Cmd(0x30);
 47e:	80 e3       	ldi	r24, 0x30	; 48
 480:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Lcd8_Cmd>
 484:	80 e2       	ldi	r24, 0x20	; 32
 486:	9e e4       	ldi	r25, 0x4E	; 78
 488:	01 97       	sbiw	r24, 0x01	; 1
 48a:	f1 f7       	brne	.-4      	; 0x488 <Lcd8_Init+0x46>
	_delay_ms(10);
	/////////////////////////////////////////////////////
	Lcd8_Cmd(0x38);    //function set
 48c:	88 e3       	ldi	r24, 0x38	; 56
 48e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Lcd8_Cmd>
	Lcd8_Cmd(0x0C);    //display on,cursor off,blink off
 492:	8c e0       	ldi	r24, 0x0C	; 12
 494:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Lcd8_Cmd>
	Lcd8_Cmd(0x01);    //clear display
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Lcd8_Cmd>
	Lcd8_Cmd(0x06);    //entry mode, set increment
 49e:	86 e0       	ldi	r24, 0x06	; 6
 4a0:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Lcd8_Cmd>
}
 4a4:	08 95       	ret

000004a6 <Lcd8_Write_Char>:

void Lcd8_Write_Char(char a)
{
 4a6:	0f 93       	push	r16
 4a8:	1f 93       	push	r17
 4aa:	18 2f       	mov	r17, r24
	pinChange(RS,1);             // => RS = 1
 4ac:	8a e1       	ldi	r24, 0x1A	; 26
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	61 e0       	ldi	r22, 0x01	; 1
 4b2:	70 e0       	ldi	r23, 0x00	; 0
 4b4:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	Lcd8_Port(a);             //Data transfer
 4b8:	81 2f       	mov	r24, r17
 4ba:	0e 94 81 01 	call	0x302	; 0x302 <Lcd8_Port>
	pinChange(EN,1);             // => E = 1
 4be:	8b e1       	ldi	r24, 0x1B	; 27
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	61 e0       	ldi	r22, 0x01	; 1
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 4ca:	00 ed       	ldi	r16, 0xD0	; 208
 4cc:	17 e0       	ldi	r17, 0x07	; 7
 4ce:	c8 01       	movw	r24, r16
 4d0:	01 97       	sbiw	r24, 0x01	; 1
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <Lcd8_Write_Char+0x2a>
	_delay_ms(1);
	pinChange(EN,0);             // => E = 04
 4d4:	8b e1       	ldi	r24, 0x1B	; 27
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	60 e0       	ldi	r22, 0x00	; 0
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 4e0:	c8 01       	movw	r24, r16
 4e2:	01 97       	sbiw	r24, 0x01	; 1
 4e4:	f1 f7       	brne	.-4      	; 0x4e2 <Lcd8_Write_Char+0x3c>
	_delay_ms(1);
}
 4e6:	1f 91       	pop	r17
 4e8:	0f 91       	pop	r16
 4ea:	08 95       	ret

000004ec <Lcd8_Write_String>:

void Lcd8_Write_String(char *a)
{
 4ec:	cf 93       	push	r28
 4ee:	df 93       	push	r29
 4f0:	ec 01       	movw	r28, r24
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <Lcd8_Write_String+0xc>
	int i;
	for(i=0;a[i]!='\0';i++)
	Lcd8_Write_Char(a[i]);
 4f4:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Lcd8_Write_Char>
}

void Lcd8_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
 4f8:	89 91       	ld	r24, Y+
 4fa:	88 23       	and	r24, r24
 4fc:	d9 f7       	brne	.-10     	; 0x4f4 <Lcd8_Write_String+0x8>
	Lcd8_Write_Char(a[i]);
}
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	08 95       	ret

00000504 <Lcd8_Shift_Right>:

void Lcd8_Shift_Right()
{
	Lcd8_Cmd(0x1C);
 504:	8c e1       	ldi	r24, 0x1C	; 28
 506:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Lcd8_Cmd>
}
 50a:	08 95       	ret

0000050c <Lcd8_Shift_Left>:

void Lcd8_Shift_Left()
{
	Lcd8_Cmd(0x18);
 50c:	88 e1       	ldi	r24, 0x18	; 24
 50e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Lcd8_Cmd>
}
 512:	08 95       	ret

00000514 <Lcd4_Port>:
//End LCD 8 Bit Interfacing Functions

//LCD 4 Bit Interfacing Functions

void Lcd4_Port(char a)
{
 514:	cf 93       	push	r28
 516:	df 93       	push	r29
	if(a & 1)
 518:	c8 2f       	mov	r28, r24
 51a:	80 ff       	sbrs	r24, 0
 51c:	05 c0       	rjmp	.+10     	; 0x528 <Lcd4_Port+0x14>
	pinChange(D4,1);
 51e:	82 e2       	ldi	r24, 0x22	; 34
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	61 e0       	ldi	r22, 0x01	; 1
 524:	70 e0       	ldi	r23, 0x00	; 0
 526:	04 c0       	rjmp	.+8      	; 0x530 <Lcd4_Port+0x1c>
	else
	pinChange(D4,0);
 528:	82 e2       	ldi	r24, 0x22	; 34
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	60 e0       	ldi	r22, 0x00	; 0
 52e:	70 e0       	ldi	r23, 0x00	; 0
 530:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 2)
 534:	c1 ff       	sbrs	r28, 1
 536:	05 c0       	rjmp	.+10     	; 0x542 <Lcd4_Port+0x2e>
	pinChange(D5,1);
 538:	83 e2       	ldi	r24, 0x23	; 35
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	61 e0       	ldi	r22, 0x01	; 1
 53e:	70 e0       	ldi	r23, 0x00	; 0
 540:	04 c0       	rjmp	.+8      	; 0x54a <Lcd4_Port+0x36>
	else
	pinChange(D5,0);
 542:	83 e2       	ldi	r24, 0x23	; 35
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	60 e0       	ldi	r22, 0x00	; 0
 548:	70 e0       	ldi	r23, 0x00	; 0
 54a:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 4)
 54e:	c2 ff       	sbrs	r28, 2
 550:	05 c0       	rjmp	.+10     	; 0x55c <Lcd4_Port+0x48>
	pinChange(D6,1);
 552:	84 e2       	ldi	r24, 0x24	; 36
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	61 e0       	ldi	r22, 0x01	; 1
 558:	70 e0       	ldi	r23, 0x00	; 0
 55a:	04 c0       	rjmp	.+8      	; 0x564 <Lcd4_Port+0x50>
	else
	pinChange(D6,0);
 55c:	84 e2       	ldi	r24, 0x24	; 36
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	60 e0       	ldi	r22, 0x00	; 0
 562:	70 e0       	ldi	r23, 0x00	; 0
 564:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 8)
 568:	c3 ff       	sbrs	r28, 3
 56a:	05 c0       	rjmp	.+10     	; 0x576 <Lcd4_Port+0x62>
	pinChange(D7,1);
 56c:	85 e2       	ldi	r24, 0x25	; 37
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	61 e0       	ldi	r22, 0x01	; 1
 572:	70 e0       	ldi	r23, 0x00	; 0
 574:	04 c0       	rjmp	.+8      	; 0x57e <Lcd4_Port+0x6a>
	else
	pinChange(D7,0);
 576:	85 e2       	ldi	r24, 0x25	; 37
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	60 e0       	ldi	r22, 0x00	; 0
 57c:	70 e0       	ldi	r23, 0x00	; 0
 57e:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
}
 582:	df 91       	pop	r29
 584:	cf 91       	pop	r28
 586:	08 95       	ret

00000588 <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
 588:	0f 93       	push	r16
 58a:	1f 93       	push	r17
 58c:	18 2f       	mov	r17, r24
	pinChange(RS,0);             // => RS = 0
 58e:	8a e1       	ldi	r24, 0x1A	; 26
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	60 e0       	ldi	r22, 0x00	; 0
 594:	70 e0       	ldi	r23, 0x00	; 0
 596:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	Lcd4_Port(a);
 59a:	81 2f       	mov	r24, r17
 59c:	0e 94 8a 02 	call	0x514	; 0x514 <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
 5a0:	8b e1       	ldi	r24, 0x1B	; 27
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	61 e0       	ldi	r22, 0x01	; 1
 5a6:	70 e0       	ldi	r23, 0x00	; 0
 5a8:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 5ac:	00 ed       	ldi	r16, 0xD0	; 208
 5ae:	17 e0       	ldi	r17, 0x07	; 7
 5b0:	c8 01       	movw	r24, r16
 5b2:	01 97       	sbiw	r24, 0x01	; 1
 5b4:	f1 f7       	brne	.-4      	; 0x5b2 <Lcd4_Cmd+0x2a>
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
 5b6:	8b e1       	ldi	r24, 0x1B	; 27
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	60 e0       	ldi	r22, 0x00	; 0
 5bc:	70 e0       	ldi	r23, 0x00	; 0
 5be:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 5c2:	c8 01       	movw	r24, r16
 5c4:	01 97       	sbiw	r24, 0x01	; 1
 5c6:	f1 f7       	brne	.-4      	; 0x5c4 <Lcd4_Cmd+0x3c>
	_delay_ms(1);
}
 5c8:	1f 91       	pop	r17
 5ca:	0f 91       	pop	r16
 5cc:	08 95       	ret

000005ce <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	0e 94 c4 02 	call	0x588	; 0x588 <Lcd4_Cmd>
	Lcd4_Cmd(1);
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	0e 94 c4 02 	call	0x588	; 0x588 <Lcd4_Cmd>
}
 5da:	08 95       	ret

000005dc <Lcd4_Set_Cursor>:

void Lcd4_Set_Cursor(char a, char b)
{
 5dc:	1f 93       	push	r17
	char temp,z,y;
	if(a == 1)
 5de:	81 30       	cpi	r24, 0x01	; 1
 5e0:	19 f4       	brne	.+6      	; 0x5e8 <Lcd4_Set_Cursor+0xc>
	{
		temp = 0x80 + b;
 5e2:	16 2f       	mov	r17, r22
 5e4:	10 58       	subi	r17, 0x80	; 128
 5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <Lcd4_Set_Cursor+0x14>
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
		Lcd4_Cmd(y);
	}
	else if(a == 2)
 5e8:	82 30       	cpi	r24, 0x02	; 2
 5ea:	59 f4       	brne	.+22     	; 0x602 <Lcd4_Set_Cursor+0x26>
	{
		temp = 0xC0 + b;
 5ec:	16 2f       	mov	r17, r22
 5ee:	10 54       	subi	r17, 0x40	; 64
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
 5f0:	81 2f       	mov	r24, r17
 5f2:	82 95       	swap	r24
 5f4:	8f 70       	andi	r24, 0x0F	; 15
 5f6:	0e 94 c4 02 	call	0x588	; 0x588 <Lcd4_Cmd>
		Lcd4_Cmd(y);
 5fa:	81 2f       	mov	r24, r17
 5fc:	8f 70       	andi	r24, 0x0F	; 15
 5fe:	0e 94 c4 02 	call	0x588	; 0x588 <Lcd4_Cmd>
	}
}
 602:	1f 91       	pop	r17
 604:	08 95       	ret

00000606 <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	0e 94 8a 02 	call	0x514	; 0x514 <Lcd4_Port>
 60c:	80 e4       	ldi	r24, 0x40	; 64
 60e:	9c e9       	ldi	r25, 0x9C	; 156
 610:	01 97       	sbiw	r24, 0x01	; 1
 612:	f1 f7       	brne	.-4      	; 0x610 <Lcd4_Init+0xa>
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
 614:	83 e0       	ldi	r24, 0x03	; 3
 616:	0e 94 c4 02 	call	0x588	; 0x588 <Lcd4_Cmd>
 61a:	80 e1       	ldi	r24, 0x10	; 16
 61c:	97 e2       	ldi	r25, 0x27	; 39
 61e:	01 97       	sbiw	r24, 0x01	; 1
 620:	f1 f7       	brne	.-4      	; 0x61e <Lcd4_Init+0x18>
	_delay_ms(5);
	Lcd4_Cmd(0x03);
 622:	83 e0       	ldi	r24, 0x03	; 3
 624:	0e 94 c4 02 	call	0x588	; 0x588 <Lcd4_Cmd>
 628:	80 ef       	ldi	r24, 0xF0	; 240
 62a:	95 e5       	ldi	r25, 0x55	; 85
 62c:	01 97       	sbiw	r24, 0x01	; 1
 62e:	f1 f7       	brne	.-4      	; 0x62c <Lcd4_Init+0x26>
	_delay_ms(11);
	Lcd4_Cmd(0x03);
 630:	83 e0       	ldi	r24, 0x03	; 3
 632:	0e 94 c4 02 	call	0x588	; 0x588 <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
 636:	82 e0       	ldi	r24, 0x02	; 2
 638:	0e 94 c4 02 	call	0x588	; 0x588 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
 63c:	82 e0       	ldi	r24, 0x02	; 2
 63e:	0e 94 c4 02 	call	0x588	; 0x588 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
 642:	88 e0       	ldi	r24, 0x08	; 8
 644:	0e 94 c4 02 	call	0x588	; 0x588 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	0e 94 c4 02 	call	0x588	; 0x588 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
 64e:	8c e0       	ldi	r24, 0x0C	; 12
 650:	0e 94 c4 02 	call	0x588	; 0x588 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	0e 94 c4 02 	call	0x588	; 0x588 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
 65a:	86 e0       	ldi	r24, 0x06	; 6
 65c:	0e 94 c4 02 	call	0x588	; 0x588 <Lcd4_Cmd>
}
 660:	08 95       	ret

00000662 <Lcd4_Write_Char>:

void Lcd4_Write_Char(char a)
{
 662:	ff 92       	push	r15
 664:	0f 93       	push	r16
 666:	1f 93       	push	r17
 668:	f8 2e       	mov	r15, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
 66a:	8a e1       	ldi	r24, 0x1A	; 26
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	61 e0       	ldi	r22, 0x01	; 1
 670:	70 e0       	ldi	r23, 0x00	; 0
 672:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
 676:	8f 2d       	mov	r24, r15
 678:	82 95       	swap	r24
 67a:	8f 70       	andi	r24, 0x0F	; 15
 67c:	0e 94 8a 02 	call	0x514	; 0x514 <Lcd4_Port>
	pinChange(EN,1);
 680:	8b e1       	ldi	r24, 0x1B	; 27
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	61 e0       	ldi	r22, 0x01	; 1
 686:	70 e0       	ldi	r23, 0x00	; 0
 688:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 68c:	00 ed       	ldi	r16, 0xD0	; 208
 68e:	17 e0       	ldi	r17, 0x07	; 7
 690:	c8 01       	movw	r24, r16
 692:	01 97       	sbiw	r24, 0x01	; 1
 694:	f1 f7       	brne	.-4      	; 0x692 <Lcd4_Write_Char+0x30>
	_delay_ms(1);
	pinChange(EN,0);
 696:	8b e1       	ldi	r24, 0x1B	; 27
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	60 e0       	ldi	r22, 0x00	; 0
 69c:	70 e0       	ldi	r23, 0x00	; 0
 69e:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 6a2:	c8 01       	movw	r24, r16
 6a4:	01 97       	sbiw	r24, 0x01	; 1
 6a6:	f1 f7       	brne	.-4      	; 0x6a4 <Lcd4_Write_Char+0x42>
	_delay_ms(1);
	Lcd4_Port(temp);
 6a8:	8f 2d       	mov	r24, r15
 6aa:	8f 70       	andi	r24, 0x0F	; 15
 6ac:	0e 94 8a 02 	call	0x514	; 0x514 <Lcd4_Port>
	pinChange(EN,1);
 6b0:	8b e1       	ldi	r24, 0x1B	; 27
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	61 e0       	ldi	r22, 0x01	; 1
 6b6:	70 e0       	ldi	r23, 0x00	; 0
 6b8:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 6bc:	c8 01       	movw	r24, r16
 6be:	01 97       	sbiw	r24, 0x01	; 1
 6c0:	f1 f7       	brne	.-4      	; 0x6be <Lcd4_Write_Char+0x5c>
	_delay_ms(1);
	pinChange(EN,0);
 6c2:	8b e1       	ldi	r24, 0x1B	; 27
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	60 e0       	ldi	r22, 0x00	; 0
 6c8:	70 e0       	ldi	r23, 0x00	; 0
 6ca:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 6ce:	c8 01       	movw	r24, r16
 6d0:	01 97       	sbiw	r24, 0x01	; 1
 6d2:	f1 f7       	brne	.-4      	; 0x6d0 <Lcd4_Write_Char+0x6e>
	_delay_ms(1);
}
 6d4:	1f 91       	pop	r17
 6d6:	0f 91       	pop	r16
 6d8:	ff 90       	pop	r15
 6da:	08 95       	ret

000006dc <Lcd4_Write_String>:

void Lcd4_Write_String(char *a)
{
 6dc:	cf 93       	push	r28
 6de:	df 93       	push	r29
 6e0:	ec 01       	movw	r28, r24
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <Lcd4_Write_String+0xc>
	int i;
	for(i=0;a[i]!='\0';i++)
	Lcd4_Write_Char(a[i]);
 6e4:	0e 94 31 03 	call	0x662	; 0x662 <Lcd4_Write_Char>
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
 6e8:	89 91       	ld	r24, Y+
 6ea:	88 23       	and	r24, r24
 6ec:	d9 f7       	brne	.-10     	; 0x6e4 <Lcd4_Write_String+0x8>
	Lcd4_Write_Char(a[i]);
}
 6ee:	df 91       	pop	r29
 6f0:	cf 91       	pop	r28
 6f2:	08 95       	ret

000006f4 <Lcd4_Shift_Right>:

void Lcd4_Shift_Right()
{
	Lcd4_Cmd(0x01);
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	0e 94 c4 02 	call	0x588	; 0x588 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
 6fa:	8c e0       	ldi	r24, 0x0C	; 12
 6fc:	0e 94 c4 02 	call	0x588	; 0x588 <Lcd4_Cmd>
}
 700:	08 95       	ret

00000702 <Lcd4_Shift_Left>:

void Lcd4_Shift_Left()
{
	Lcd4_Cmd(0x01);
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	0e 94 c4 02 	call	0x588	; 0x588 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
 708:	88 e0       	ldi	r24, 0x08	; 8
 70a:	0e 94 c4 02 	call	0x588	; 0x588 <Lcd4_Cmd>
}
 70e:	08 95       	ret

00000710 <main>:
#define EN eS_PORTC7

#include "lcd.h"

int main(void)
{
 710:	8f 92       	push	r8
 712:	9f 92       	push	r9
 714:	af 92       	push	r10
 716:	bf 92       	push	r11
 718:	cf 92       	push	r12
 71a:	df 92       	push	r13
 71c:	ef 92       	push	r14
 71e:	ff 92       	push	r15
 720:	0f 93       	push	r16
 722:	1f 93       	push	r17
 724:	df 93       	push	r29
 726:	cf 93       	push	r28
 728:	00 d0       	rcall	.+0      	; 0x72a <main+0x1a>
 72a:	00 d0       	rcall	.+0      	; 0x72c <main+0x1c>
 72c:	cd b7       	in	r28, 0x3d	; 61
 72e:	de b7       	in	r29, 0x3e	; 62
	DDRD = 0xFF;
 730:	8f ef       	ldi	r24, 0xFF	; 255
 732:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
 734:	84 bb       	out	0x14, r24	; 20
	Lcd8_Init();
 736:	0e 94 21 02 	call	0x442	; 0x442 <Lcd8_Init>
 73a:	21 e0       	ldi	r18, 0x01	; 1
 73c:	e2 2e       	mov	r14, r18
 73e:	f1 2c       	mov	r15, r1
	{
		for(int y = 1; y <= 4; y++)
		{
			for(int x = 1; x <= 20; x++)
			{
				itoa(x, positionString, 10);
 740:	6e 01       	movw	r12, r28
 742:	08 94       	sec
 744:	c1 1c       	adc	r12, r1
 746:	d1 1c       	adc	r13, r1
 748:	98 ec       	ldi	r25, 0xC8	; 200
 74a:	89 2e       	mov	r8, r25
 74c:	91 2c       	mov	r9, r1
 74e:	5a c0       	rjmp	.+180    	; 0x804 <main+0xf4>
 750:	c8 01       	movw	r24, r16
 752:	b6 01       	movw	r22, r12
 754:	4a e0       	ldi	r20, 0x0A	; 10
 756:	50 e0       	ldi	r21, 0x00	; 0
 758:	0e 94 06 04 	call	0x80c	; 0x80c <itoa>
				Lcd8_Set_Cursor(12, 3);
 75c:	8c e0       	ldi	r24, 0x0C	; 12
 75e:	63 e0       	ldi	r22, 0x03	; 3
 760:	0e 94 17 02 	call	0x42e	; 0x42e <Lcd8_Set_Cursor>
				Lcd8_Write_String("X = ");
 764:	80 e6       	ldi	r24, 0x60	; 96
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	0e 94 76 02 	call	0x4ec	; 0x4ec <Lcd8_Write_String>
				Lcd8_Write_String(positionString);
 76c:	c6 01       	movw	r24, r12
 76e:	0e 94 76 02 	call	0x4ec	; 0x4ec <Lcd8_Write_String>
				
				itoa(y, positionString, 10);
 772:	c7 01       	movw	r24, r14
 774:	b6 01       	movw	r22, r12
 776:	4a e0       	ldi	r20, 0x0A	; 10
 778:	50 e0       	ldi	r21, 0x00	; 0
 77a:	0e 94 06 04 	call	0x80c	; 0x80c <itoa>
				Lcd8_Set_Cursor(12, 4);
 77e:	8c e0       	ldi	r24, 0x0C	; 12
 780:	64 e0       	ldi	r22, 0x04	; 4
 782:	0e 94 17 02 	call	0x42e	; 0x42e <Lcd8_Set_Cursor>
				Lcd8_Write_String("Y = ");
 786:	85 e6       	ldi	r24, 0x65	; 101
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	0e 94 76 02 	call	0x4ec	; 0x4ec <Lcd8_Write_String>
				Lcd8_Write_String(positionString);
 78e:	c6 01       	movw	r24, r12
 790:	0e 94 76 02 	call	0x4ec	; 0x4ec <Lcd8_Write_String>
 794:	b0 2e       	mov	r11, r16
				
				Lcd8_Set_Cursor(x, y);
 796:	80 2f       	mov	r24, r16
 798:	6a 2d       	mov	r22, r10
 79a:	0e 94 17 02 	call	0x42e	; 0x42e <Lcd8_Set_Cursor>
				Lcd8_Write_String("x");
 79e:	8a e6       	ldi	r24, 0x6A	; 106
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	0e 94 76 02 	call	0x4ec	; 0x4ec <Lcd8_Write_String>
 7a6:	84 ef       	ldi	r24, 0xF4	; 244
 7a8:	91 e0       	ldi	r25, 0x01	; 1
 7aa:	f4 01       	movw	r30, r8
 7ac:	31 97       	sbiw	r30, 0x01	; 1
 7ae:	f1 f7       	brne	.-4      	; 0x7ac <main+0x9c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 7b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 7b2:	d9 f7       	brne	.-10     	; 0x7aa <main+0x9a>
				
				_delay_ms(50);
				
				Lcd8_Set_Cursor(x, y);
 7b4:	8b 2d       	mov	r24, r11
 7b6:	6a 2d       	mov	r22, r10
 7b8:	0e 94 17 02 	call	0x42e	; 0x42e <Lcd8_Set_Cursor>
				Lcd8_Write_String(" ");				
 7bc:	8c e6       	ldi	r24, 0x6C	; 108
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	0e 94 76 02 	call	0x4ec	; 0x4ec <Lcd8_Write_String>
				
				Lcd8_Set_Cursor(12, 3);
 7c4:	8c e0       	ldi	r24, 0x0C	; 12
 7c6:	63 e0       	ldi	r22, 0x03	; 3
 7c8:	0e 94 17 02 	call	0x42e	; 0x42e <Lcd8_Set_Cursor>
				Lcd8_Write_String("      ");
 7cc:	8e e6       	ldi	r24, 0x6E	; 110
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	0e 94 76 02 	call	0x4ec	; 0x4ec <Lcd8_Write_String>
				
				Lcd8_Set_Cursor(12, 4);
 7d4:	8c e0       	ldi	r24, 0x0C	; 12
 7d6:	64 e0       	ldi	r22, 0x04	; 4
 7d8:	0e 94 17 02 	call	0x42e	; 0x42e <Lcd8_Set_Cursor>
				Lcd8_Write_String("      ");
 7dc:	8e e6       	ldi	r24, 0x6E	; 110
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	0e 94 76 02 	call	0x4ec	; 0x4ec <Lcd8_Write_String>
	char positionString[4];
	while(1)
	{
		for(int y = 1; y <= 4; y++)
		{
			for(int x = 1; x <= 20; x++)
 7e4:	0f 5f       	subi	r16, 0xFF	; 255
 7e6:	1f 4f       	sbci	r17, 0xFF	; 255
 7e8:	05 31       	cpi	r16, 0x15	; 21
 7ea:	11 05       	cpc	r17, r1
 7ec:	09 f0       	breq	.+2      	; 0x7f0 <main+0xe0>
 7ee:	b0 cf       	rjmp	.-160    	; 0x750 <main+0x40>
	Lcd8_Init();

	char positionString[4];
	while(1)
	{
		for(int y = 1; y <= 4; y++)
 7f0:	08 94       	sec
 7f2:	e1 1c       	adc	r14, r1
 7f4:	f1 1c       	adc	r15, r1
 7f6:	85 e0       	ldi	r24, 0x05	; 5
 7f8:	e8 16       	cp	r14, r24
 7fa:	f1 04       	cpc	r15, r1
 7fc:	1c f0       	brlt	.+6      	; 0x804 <main+0xf4>
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	e8 2e       	mov	r14, r24
 802:	f1 2c       	mov	r15, r1
 804:	01 e0       	ldi	r16, 0x01	; 1
 806:	10 e0       	ldi	r17, 0x00	; 0
				itoa(y, positionString, 10);
				Lcd8_Set_Cursor(12, 4);
				Lcd8_Write_String("Y = ");
				Lcd8_Write_String(positionString);
				
				Lcd8_Set_Cursor(x, y);
 808:	ae 2c       	mov	r10, r14
 80a:	a2 cf       	rjmp	.-188    	; 0x750 <main+0x40>

0000080c <itoa>:
 80c:	fb 01       	movw	r30, r22
 80e:	9f 01       	movw	r18, r30
 810:	e8 94       	clt
 812:	42 30       	cpi	r20, 0x02	; 2
 814:	c4 f0       	brlt	.+48     	; 0x846 <itoa+0x3a>
 816:	45 32       	cpi	r20, 0x25	; 37
 818:	b4 f4       	brge	.+44     	; 0x846 <itoa+0x3a>
 81a:	4a 30       	cpi	r20, 0x0A	; 10
 81c:	29 f4       	brne	.+10     	; 0x828 <itoa+0x1c>
 81e:	97 fb       	bst	r25, 7
 820:	1e f4       	brtc	.+6      	; 0x828 <itoa+0x1c>
 822:	90 95       	com	r25
 824:	81 95       	neg	r24
 826:	9f 4f       	sbci	r25, 0xFF	; 255
 828:	64 2f       	mov	r22, r20
 82a:	77 27       	eor	r23, r23
 82c:	0e 94 37 04 	call	0x86e	; 0x86e <__udivmodhi4>
 830:	80 5d       	subi	r24, 0xD0	; 208
 832:	8a 33       	cpi	r24, 0x3A	; 58
 834:	0c f0       	brlt	.+2      	; 0x838 <itoa+0x2c>
 836:	89 5d       	subi	r24, 0xD9	; 217
 838:	81 93       	st	Z+, r24
 83a:	cb 01       	movw	r24, r22
 83c:	00 97       	sbiw	r24, 0x00	; 0
 83e:	a1 f7       	brne	.-24     	; 0x828 <itoa+0x1c>
 840:	16 f4       	brtc	.+4      	; 0x846 <itoa+0x3a>
 842:	5d e2       	ldi	r21, 0x2D	; 45
 844:	51 93       	st	Z+, r21
 846:	10 82       	st	Z, r1
 848:	c9 01       	movw	r24, r18
 84a:	0c 94 27 04 	jmp	0x84e	; 0x84e <strrev>

0000084e <strrev>:
 84e:	dc 01       	movw	r26, r24
 850:	fc 01       	movw	r30, r24
 852:	67 2f       	mov	r22, r23
 854:	71 91       	ld	r23, Z+
 856:	77 23       	and	r23, r23
 858:	e1 f7       	brne	.-8      	; 0x852 <strrev+0x4>
 85a:	32 97       	sbiw	r30, 0x02	; 2
 85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
 85e:	7c 91       	ld	r23, X
 860:	6d 93       	st	X+, r22
 862:	70 83       	st	Z, r23
 864:	62 91       	ld	r22, -Z
 866:	ae 17       	cp	r26, r30
 868:	bf 07       	cpc	r27, r31
 86a:	c8 f3       	brcs	.-14     	; 0x85e <strrev+0x10>
 86c:	08 95       	ret

0000086e <__udivmodhi4>:
 86e:	aa 1b       	sub	r26, r26
 870:	bb 1b       	sub	r27, r27
 872:	51 e1       	ldi	r21, 0x11	; 17
 874:	07 c0       	rjmp	.+14     	; 0x884 <__udivmodhi4_ep>

00000876 <__udivmodhi4_loop>:
 876:	aa 1f       	adc	r26, r26
 878:	bb 1f       	adc	r27, r27
 87a:	a6 17       	cp	r26, r22
 87c:	b7 07       	cpc	r27, r23
 87e:	10 f0       	brcs	.+4      	; 0x884 <__udivmodhi4_ep>
 880:	a6 1b       	sub	r26, r22
 882:	b7 0b       	sbc	r27, r23

00000884 <__udivmodhi4_ep>:
 884:	88 1f       	adc	r24, r24
 886:	99 1f       	adc	r25, r25
 888:	5a 95       	dec	r21
 88a:	a9 f7       	brne	.-22     	; 0x876 <__udivmodhi4_loop>
 88c:	80 95       	com	r24
 88e:	90 95       	com	r25
 890:	bc 01       	movw	r22, r24
 892:	cd 01       	movw	r24, r26
 894:	08 95       	ret

00000896 <_exit>:
 896:	f8 94       	cli

00000898 <__stop_program>:
 898:	ff cf       	rjmp	.-2      	; 0x898 <__stop_program>
