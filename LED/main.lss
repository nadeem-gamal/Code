
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000aa  00000000  00000000  0000015d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000005f  00000000  00000000  00000207  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000d2  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000a1  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  000003f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRB |= (1 << PINB0);
  6c:	b8 9a       	sbi	0x17, 0	; 23
	PORTB ^= (1 << PINB0);
  6e:	88 b3       	in	r24, 0x18	; 24
  70:	91 e0       	ldi	r25, 0x01	; 1
  72:	89 27       	eor	r24, r25
  74:	88 bb       	out	0x18, r24	; 24
	DDRB |= (1 << PINB2);
  76:	ba 9a       	sbi	0x17, 2	; 23
	DDRB &= ~(1 << PINB1);
  78:	b9 98       	cbi	0x17, 1	; 23
	PORTB |= (1 << PINB1);
  7a:	c1 9a       	sbi	0x18, 1	; 24
  7c:	40 e0       	ldi	r20, 0x00	; 0
  7e:	50 e0       	ldi	r21, 0x00	; 0
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	30 e0       	ldi	r19, 0x00	; 0
			pressed_confidence_level ++;
			if(pressed_confidence_level > 200)
			{
				if(Pressed == 0)
				{
					PORTB ^= (1 << PINB0);
  88:	71 e0       	ldi	r23, 0x01	; 1
					PORTB ^= (1 << PINB2);
  8a:	64 e0       	ldi	r22, 0x04	; 4
  8c:	04 c0       	rjmp	.+8      	; 0x96 <main+0x2a>
{
	DDRB |= (1 << PINB0);
	PORTB ^= (1 << PINB0);
	DDRB |= (1 << PINB2);
	DDRB &= ~(1 << PINB1);
	PORTB |= (1 << PINB1);
  8e:	40 e0       	ldi	r20, 0x00	; 0
  90:	50 e0       	ldi	r21, 0x00	; 0
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	30 e0       	ldi	r19, 0x00	; 0
	int released_confidence_level = 0;
	
	while(1)
	{
		
		if(bit_is_clear(PINB, 1))
  96:	b1 99       	sbic	0x16, 1	; 22
  98:	12 c0       	rjmp	.+36     	; 0xbe <main+0x52>
		{
			pressed_confidence_level ++;
  9a:	01 96       	adiw	r24, 0x01	; 1
			if(pressed_confidence_level > 200)
  9c:	89 3c       	cpi	r24, 0xC9	; 201
  9e:	91 05       	cpc	r25, r1
  a0:	d4 f3       	brlt	.-12     	; 0x96 <main+0x2a>
			{
				if(Pressed == 0)
  a2:	41 15       	cp	r20, r1
  a4:	51 05       	cpc	r21, r1
  a6:	41 f4       	brne	.+16     	; 0xb8 <main+0x4c>
				{
					PORTB ^= (1 << PINB0);
  a8:	88 b3       	in	r24, 0x18	; 24
  aa:	87 27       	eor	r24, r23
  ac:	88 bb       	out	0x18, r24	; 24
					PORTB ^= (1 << PINB2);
  ae:	88 b3       	in	r24, 0x18	; 24
  b0:	86 27       	eor	r24, r22
  b2:	88 bb       	out	0x18, r24	; 24
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	50 e0       	ldi	r21, 0x00	; 0
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	ec cf       	rjmp	.-40     	; 0x96 <main+0x2a>
			}

		} 
		else
		{
			released_confidence_level ++;
  be:	2f 5f       	subi	r18, 0xFF	; 255
  c0:	3f 4f       	sbci	r19, 0xFF	; 255
			if(released_confidence_level > 200)
  c2:	29 3c       	cpi	r18, 0xC9	; 201
  c4:	31 05       	cpc	r19, r1
  c6:	1c f7       	brge	.-58     	; 0x8e <main+0x22>
  c8:	e6 cf       	rjmp	.-52     	; 0x96 <main+0x2a>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
