
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000214  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000010  00800060  00800060  00000288  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000a3  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000238  00000000  00000000  0000034b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000015f  00000000  00000000  00000583  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000025f  00000000  00000000  000006e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000944  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000135  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000080  00000000  00000000  00000ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000b39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 37       	cpi	r26, 0x70	; 112
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  74:	0c 94 08 01 	jmp	0x210	; 0x210 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <processPressedButton>:
}



void processPressedButton(int buttonPressed)
{
  7c:	dc 01       	movw	r26, r24
	pressed_confidence_level[buttonPressed] ++;
  7e:	9c 01       	movw	r18, r24
  80:	22 0f       	add	r18, r18
  82:	33 1f       	adc	r19, r19
  84:	f9 01       	movw	r30, r18
  86:	ec 59       	subi	r30, 0x9C	; 156
  88:	ff 4f       	sbci	r31, 0xFF	; 255
  8a:	80 81       	ld	r24, Z
  8c:	91 81       	ldd	r25, Z+1	; 0x01
  8e:	01 96       	adiw	r24, 0x01	; 1
  90:	91 83       	std	Z+1, r25	; 0x01
  92:	80 83       	st	Z, r24
	if(pressed_confidence_level[buttonPressed] > 500)
  94:	85 5f       	subi	r24, 0xF5	; 245
  96:	91 40       	sbci	r25, 0x01	; 1
  98:	0c f4       	brge	.+2      	; 0x9c <processPressedButton+0x20>
  9a:	65 c0       	rjmp	.+202    	; 0x166 <processPressedButton+0xea>
	{
		if(pressed[buttonPressed] == 0)
  9c:	f9 01       	movw	r30, r18
  9e:	e4 59       	subi	r30, 0x94	; 148
  a0:	ff 4f       	sbci	r31, 0xFF	; 255
  a2:	80 81       	ld	r24, Z
  a4:	91 81       	ldd	r25, Z+1	; 0x01
  a6:	89 2b       	or	r24, r25
  a8:	09 f0       	breq	.+2      	; 0xac <processPressedButton+0x30>
  aa:	57 c0       	rjmp	.+174    	; 0x15a <processPressedButton+0xde>
		{
			pressed[buttonPressed] = 1;
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	31 83       	std	Z+1, r19	; 0x01
  b2:	20 83       	st	Z, r18
			if(buttonPressed == 0) PORTB |= (1 << LEDNumber[buttonPressed]);
  b4:	10 97       	sbiw	r26, 0x00	; 0
  b6:	59 f4       	brne	.+22     	; 0xce <processPressedButton+0x52>
  b8:	88 b3       	in	r24, 0x18	; 24
  ba:	00 90 60 00 	lds	r0, 0x0060
  be:	02 c0       	rjmp	.+4      	; 0xc4 <processPressedButton+0x48>
  c0:	22 0f       	add	r18, r18
  c2:	33 1f       	adc	r19, r19
  c4:	0a 94       	dec	r0
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <processPressedButton+0x44>
  c8:	82 2b       	or	r24, r18
  ca:	88 bb       	out	0x18, r24	; 24
  cc:	0e c0       	rjmp	.+28     	; 0xea <processPressedButton+0x6e>
			if(buttonPressed == 1) PORTD |= (1 << LEDNumber[buttonPressed]);
  ce:	a1 30       	cpi	r26, 0x01	; 1
  d0:	b1 05       	cpc	r27, r1
  d2:	59 f4       	brne	.+22     	; 0xea <processPressedButton+0x6e>
  d4:	22 b3       	in	r18, 0x12	; 18
  d6:	cd 01       	movw	r24, r26
  d8:	00 90 62 00 	lds	r0, 0x0062
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <processPressedButton+0x66>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	0a 94       	dec	r0
  e4:	e2 f7       	brpl	.-8      	; 0xde <processPressedButton+0x62>
  e6:	28 2b       	or	r18, r24
  e8:	22 bb       	out	0x12, r18	; 18
			LEDNumber[buttonPressed] ++;
  ea:	fd 01       	movw	r30, r26
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	e0 5a       	subi	r30, 0xA0	; 160
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	80 81       	ld	r24, Z
  f6:	91 81       	ldd	r25, Z+1	; 0x01
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	91 83       	std	Z+1, r25	; 0x01
  fc:	80 83       	st	Z, r24
			if(LEDNumber[buttonPressed] > 6)
  fe:	07 97       	sbiw	r24, 0x07	; 7
 100:	64 f1       	brlt	.+88     	; 0x15a <processPressedButton+0xde>
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
			{
				for(int i = 0; i < 10; i++)
				{
					if(buttonPressed == 0) PORTB = 0b11111111;
					if(buttonPressed == 1) PORTD = 0b11111111;
 106:	7f ef       	ldi	r23, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 108:	40 e2       	ldi	r20, 0x20	; 32
 10a:	5e e4       	ldi	r21, 0x4E	; 78
					_delay_ms(10);
					if(buttonPressed == 0) PORTB = 0b10000000;
					if(buttonPressed == 1) PORTD = 0b10000000;
 10c:	60 e8       	ldi	r22, 0x80	; 128
			LEDNumber[buttonPressed] ++;
			if(LEDNumber[buttonPressed] > 6)
			{
				for(int i = 0; i < 10; i++)
				{
					if(buttonPressed == 0) PORTB = 0b11111111;
 10e:	10 97       	sbiw	r26, 0x00	; 0
 110:	11 f4       	brne	.+4      	; 0x116 <processPressedButton+0x9a>
 112:	78 bb       	out	0x18, r23	; 24
 114:	04 c0       	rjmp	.+8      	; 0x11e <processPressedButton+0xa2>
					if(buttonPressed == 1) PORTD = 0b11111111;
 116:	a1 30       	cpi	r26, 0x01	; 1
 118:	b1 05       	cpc	r27, r1
 11a:	09 f4       	brne	.+2      	; 0x11e <processPressedButton+0xa2>
 11c:	72 bb       	out	0x12, r23	; 18
 11e:	ca 01       	movw	r24, r20
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <processPressedButton+0xa4>
					_delay_ms(10);
					if(buttonPressed == 0) PORTB = 0b10000000;
 124:	10 97       	sbiw	r26, 0x00	; 0
 126:	11 f4       	brne	.+4      	; 0x12c <processPressedButton+0xb0>
 128:	68 bb       	out	0x18, r22	; 24
 12a:	04 c0       	rjmp	.+8      	; 0x134 <processPressedButton+0xb8>
					if(buttonPressed == 1) PORTD = 0b10000000;
 12c:	a1 30       	cpi	r26, 0x01	; 1
 12e:	b1 05       	cpc	r27, r1
 130:	09 f4       	brne	.+2      	; 0x134 <processPressedButton+0xb8>
 132:	62 bb       	out	0x12, r22	; 18
 134:	ca 01       	movw	r24, r20
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <processPressedButton+0xba>
			if(buttonPressed == 0) PORTB |= (1 << LEDNumber[buttonPressed]);
			if(buttonPressed == 1) PORTD |= (1 << LEDNumber[buttonPressed]);
			LEDNumber[buttonPressed] ++;
			if(LEDNumber[buttonPressed] > 6)
			{
				for(int i = 0; i < 10; i++)
 13a:	2f 5f       	subi	r18, 0xFF	; 255
 13c:	3f 4f       	sbci	r19, 0xFF	; 255
 13e:	2a 30       	cpi	r18, 0x0A	; 10
 140:	31 05       	cpc	r19, r1
 142:	29 f7       	brne	.-54     	; 0x10e <processPressedButton+0x92>
					_delay_ms(10);
					if(buttonPressed == 0) PORTB = 0b10000000;
					if(buttonPressed == 1) PORTD = 0b10000000;
					_delay_ms(10);
				}
				LEDNumber[0] = 0;
 144:	10 92 61 00 	sts	0x0061, r1
 148:	10 92 60 00 	sts	0x0060, r1
				LEDNumber[1] = 0;
 14c:	10 92 63 00 	sts	0x0063, r1
 150:	10 92 62 00 	sts	0x0062, r1
				PORTB = 0b10000000;
 154:	80 e8       	ldi	r24, 0x80	; 128
 156:	88 bb       	out	0x18, r24	; 24
				PORTD = 0b10000000;
 158:	82 bb       	out	0x12, r24	; 18
			}
		}
		pressed_confidence_level[buttonPressed] = 0;
 15a:	aa 0f       	add	r26, r26
 15c:	bb 1f       	adc	r27, r27
 15e:	ac 59       	subi	r26, 0x9C	; 156
 160:	bf 4f       	sbci	r27, 0xFF	; 255
 162:	1d 92       	st	X+, r1
 164:	1c 92       	st	X, r1
 166:	08 95       	ret

00000168 <main>:
int pressed[2];
int LEDNumber[2];

int main(void)
{
	DDRB = 0b01111111;
 168:	8f e7       	ldi	r24, 0x7F	; 127
 16a:	87 bb       	out	0x17, r24	; 23
	DDRD = 0b01111111;
 16c:	81 bb       	out	0x11, r24	; 17
	PORTB = 0b10000000;
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	88 bb       	out	0x18, r24	; 24
	PORTD = 0b10000000;
 172:	82 bb       	out	0x12, r24	; 18
	
	
	while(1)
	{
		if(bit_is_clear(PINB, 7))
 174:	b7 99       	sbic	0x16, 7	; 22
 176:	05 c0       	rjmp	.+10     	; 0x182 <main+0x1a>
		{
			processPressedButton(0);
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 3e 00 	call	0x7c	; 0x7c <processPressedButton>
 180:	14 c0       	rjmp	.+40     	; 0x1aa <main+0x42>
	}
}

void processReleasedButton(int buttonReleased)
{
	released_confidence_level[buttonReleased] ++;
 182:	80 91 68 00 	lds	r24, 0x0068
 186:	90 91 69 00 	lds	r25, 0x0069
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	90 93 69 00 	sts	0x0069, r25
 190:	80 93 68 00 	sts	0x0068, r24
	if(released_confidence_level[buttonReleased] > 500)
 194:	85 5f       	subi	r24, 0xF5	; 245
 196:	91 40       	sbci	r25, 0x01	; 1
 198:	44 f0       	brlt	.+16     	; 0x1aa <main+0x42>
	{
		pressed[buttonReleased] = 0;
 19a:	10 92 6d 00 	sts	0x006D, r1
 19e:	10 92 6c 00 	sts	0x006C, r1
		released_confidence_level[buttonReleased] = 0;
 1a2:	10 92 69 00 	sts	0x0069, r1
 1a6:	10 92 68 00 	sts	0x0068, r1
		else
		{
			processReleasedButton(0);
		}
		
		if(bit_is_clear(PIND, 7))
 1aa:	87 99       	sbic	0x10, 7	; 16
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <main+0x50>
		{
			processPressedButton(1);
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 3e 00 	call	0x7c	; 0x7c <processPressedButton>
 1b6:	de cf       	rjmp	.-68     	; 0x174 <main+0xc>
	}
}

void processReleasedButton(int buttonReleased)
{
	released_confidence_level[buttonReleased] ++;
 1b8:	80 91 6a 00 	lds	r24, 0x006A
 1bc:	90 91 6b 00 	lds	r25, 0x006B
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	90 93 6b 00 	sts	0x006B, r25
 1c6:	80 93 6a 00 	sts	0x006A, r24
	if(released_confidence_level[buttonReleased] > 500)
 1ca:	85 5f       	subi	r24, 0xF5	; 245
 1cc:	91 40       	sbci	r25, 0x01	; 1
 1ce:	94 f2       	brlt	.-92     	; 0x174 <main+0xc>
	{
		pressed[buttonReleased] = 0;
 1d0:	10 92 6f 00 	sts	0x006F, r1
 1d4:	10 92 6e 00 	sts	0x006E, r1
		released_confidence_level[buttonReleased] = 0;
 1d8:	10 92 6b 00 	sts	0x006B, r1
 1dc:	10 92 6a 00 	sts	0x006A, r1
 1e0:	c9 cf       	rjmp	.-110    	; 0x174 <main+0xc>

000001e2 <processReleasedButton>:
	}
}

void processReleasedButton(int buttonReleased)
{
	released_confidence_level[buttonReleased] ++;
 1e2:	fc 01       	movw	r30, r24
 1e4:	ee 0f       	add	r30, r30
 1e6:	ff 1f       	adc	r31, r31
 1e8:	df 01       	movw	r26, r30
 1ea:	a8 59       	subi	r26, 0x98	; 152
 1ec:	bf 4f       	sbci	r27, 0xFF	; 255
 1ee:	8d 91       	ld	r24, X+
 1f0:	9c 91       	ld	r25, X
 1f2:	11 97       	sbiw	r26, 0x01	; 1
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	11 96       	adiw	r26, 0x01	; 1
 1f8:	9c 93       	st	X, r25
 1fa:	8e 93       	st	-X, r24
	if(released_confidence_level[buttonReleased] > 500)
 1fc:	85 5f       	subi	r24, 0xF5	; 245
 1fe:	91 40       	sbci	r25, 0x01	; 1
 200:	34 f0       	brlt	.+12     	; 0x20e <processReleasedButton+0x2c>
	{
		pressed[buttonReleased] = 0;
 202:	e4 59       	subi	r30, 0x94	; 148
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	11 82       	std	Z+1, r1	; 0x01
 208:	10 82       	st	Z, r1
		released_confidence_level[buttonReleased] = 0;
 20a:	1d 92       	st	X+, r1
 20c:	1c 92       	st	X, r1
 20e:	08 95       	ret

00000210 <_exit>:
 210:	f8 94       	cli

00000212 <__stop_program>:
 212:	ff cf       	rjmp	.-2      	; 0x212 <__stop_program>
