
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000160  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800060  00800060  000001d4  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000074  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000130  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000a4  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000010d  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e0  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000047  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 36       	cpi	r26, 0x6A	; 106
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  74:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ButtonPressed>:
char Pressed[numberOfButtons];
int Pressed_Confidence_Level[numberOfButtons]; //Measure button press cofidence
int Released_Confidence_Level[numberOfButtons]; //Measure button release confidence
	
char ButtonPressed(int buttonNumber, unsigned char pinOfButton, unsigned char portBit, int confidenceLevel)
{
  7c:	0f 93       	push	r16
  7e:	1f 93       	push	r17
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	0f 92       	push	r0
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	8c 01       	movw	r16, r24
  8c:	69 83       	std	Y+1, r22	; 0x01
	if (bit_is_clear(pinOfButton, portBit))
  8e:	89 81       	ldd	r24, Y+1	; 0x01
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	02 c0       	rjmp	.+4      	; 0x98 <ButtonPressed+0x1c>
  94:	95 95       	asr	r25
  96:	87 95       	ror	r24
  98:	4a 95       	dec	r20
  9a:	e2 f7       	brpl	.-8      	; 0x94 <ButtonPressed+0x18>
  9c:	f8 01       	movw	r30, r16
  9e:	ee 0f       	add	r30, r30
  a0:	ff 1f       	adc	r31, r31
  a2:	80 fd       	sbrc	r24, 0
  a4:	1a c0       	rjmp	.+52     	; 0xda <ButtonPressed+0x5e>
	{
		Pressed_Confidence_Level[buttonNumber] ++; //Increase Pressed Conficence
  a6:	df 01       	movw	r26, r30
  a8:	ac 59       	subi	r26, 0x9C	; 156
  aa:	bf 4f       	sbci	r27, 0xFF	; 255
  ac:	8d 91       	ld	r24, X+
  ae:	9c 91       	ld	r25, X
  b0:	11 97       	sbiw	r26, 0x01	; 1
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	11 96       	adiw	r26, 0x01	; 1
  b6:	9c 93       	st	X, r25
  b8:	8e 93       	st	-X, r24
		Released_Confidence_Level[buttonNumber] = 0; //Reset released button confidence since there is a button press
  ba:	e0 5a       	subi	r30, 0xA0	; 160
  bc:	ff 4f       	sbci	r31, 0xFF	; 255
  be:	11 82       	std	Z+1, r1	; 0x01
  c0:	10 82       	st	Z, r1
		if (Pressed_Confidence_Level[buttonNumber] > confidenceLevel) //Indicator of good button press
  c2:	28 17       	cp	r18, r24
  c4:	39 07       	cpc	r19, r25
  c6:	04 f5       	brge	.+64     	; 0x108 <ButtonPressed+0x8c>
		{
			if (Pressed[buttonNumber] == 0)
  c8:	f8 01       	movw	r30, r16
  ca:	e8 59       	subi	r30, 0x98	; 152
  cc:	ff 4f       	sbci	r31, 0xFF	; 255
  ce:	80 81       	ld	r24, Z
  d0:	88 23       	and	r24, r24
  d2:	c1 f4       	brne	.+48     	; 0x104 <ButtonPressed+0x88>
			{
				Pressed[buttonNumber] = 1;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 83       	st	Z, r24
  d8:	18 c0       	rjmp	.+48     	; 0x10a <ButtonPressed+0x8e>
			Pressed_Confidence_Level[buttonNumber] = 0;
		}
	}
	else
	{
		Released_Confidence_Level[buttonNumber] ++; //This works just like the pressed
  da:	df 01       	movw	r26, r30
  dc:	a0 5a       	subi	r26, 0xA0	; 160
  de:	bf 4f       	sbci	r27, 0xFF	; 255
  e0:	8d 91       	ld	r24, X+
  e2:	9c 91       	ld	r25, X
  e4:	11 97       	sbiw	r26, 0x01	; 1
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	11 96       	adiw	r26, 0x01	; 1
  ea:	9c 93       	st	X, r25
  ec:	8e 93       	st	-X, r24
		Pressed_Confidence_Level[buttonNumber] = 0; //Reset pressed button confidence since the button is released
  ee:	ec 59       	subi	r30, 0x9C	; 156
  f0:	ff 4f       	sbci	r31, 0xFF	; 255
  f2:	11 82       	std	Z+1, r1	; 0x01
  f4:	10 82       	st	Z, r1
		if (Released_Confidence_Level[buttonNumber] > confidenceLevel)
  f6:	28 17       	cp	r18, r24
  f8:	39 07       	cpc	r19, r25
  fa:	34 f4       	brge	.+12     	; 0x108 <ButtonPressed+0x8c>
		{
			Pressed[buttonNumber] = 0;
  fc:	08 59       	subi	r16, 0x98	; 152
  fe:	1f 4f       	sbci	r17, 0xFF	; 255
 100:	f8 01       	movw	r30, r16
 102:	10 82       	st	Z, r1
			Released_Confidence_Level[buttonNumber] = 0;
 104:	1d 92       	st	X+, r1
 106:	1c 92       	st	X, r1
 108:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return 0;
}
 10a:	0f 90       	pop	r0
 10c:	cf 91       	pop	r28
 10e:	df 91       	pop	r29
 110:	1f 91       	pop	r17
 112:	0f 91       	pop	r16
 114:	08 95       	ret

00000116 <main>:
#include <ButtonPress.h>



int main(void)
{
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
	DDRB = 0b00001100;
 11a:	8c e0       	ldi	r24, 0x0C	; 12
 11c:	87 bb       	out	0x17, r24	; 23
	PORTB = (1 << PINB0) | (1 << PINB1);	
 11e:	83 e0       	ldi	r24, 0x03	; 3
 120:	88 bb       	out	0x18, r24	; 24
	
	while(1)
	{
		if(ButtonPressed(0, PINB, 0, 100))
		{
			PORTB ^= (1<<PINB2);
 122:	04 e0       	ldi	r16, 0x04	; 4
		}
		if(ButtonPressed(1, PINB, 1, 100))
		{
			PORTB ^= (1<<PINB3);
 124:	18 e0       	ldi	r17, 0x08	; 8
	DDRB = 0b00001100;
	PORTB = (1 << PINB0) | (1 << PINB1);	
	
	while(1)
	{
		if(ButtonPressed(0, PINB, 0, 100))
 126:	66 b3       	in	r22, 0x16	; 22
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	40 e0       	ldi	r20, 0x00	; 0
 12e:	24 e6       	ldi	r18, 0x64	; 100
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	0e 94 3e 00 	call	0x7c	; 0x7c <ButtonPressed>
 136:	88 23       	and	r24, r24
 138:	19 f0       	breq	.+6      	; 0x140 <main+0x2a>
		{
			PORTB ^= (1<<PINB2);
 13a:	88 b3       	in	r24, 0x18	; 24
 13c:	80 27       	eor	r24, r16
 13e:	88 bb       	out	0x18, r24	; 24
		}
		if(ButtonPressed(1, PINB, 1, 100))
 140:	66 b3       	in	r22, 0x16	; 22
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	24 e6       	ldi	r18, 0x64	; 100
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	0e 94 3e 00 	call	0x7c	; 0x7c <ButtonPressed>
 150:	88 23       	and	r24, r24
 152:	49 f3       	breq	.-46     	; 0x126 <main+0x10>
		{
			PORTB ^= (1<<PINB3);
 154:	88 b3       	in	r24, 0x18	; 24
 156:	81 27       	eor	r24, r17
 158:	88 bb       	out	0x18, r24	; 24
 15a:	e5 cf       	rjmp	.-54     	; 0x126 <main+0x10>

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
